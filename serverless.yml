service: aws-sls-short-linker
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, self:custom.default}
  environment:
    TABLE_NAME_LINKS: Links
    TABLE_NAME_USERS: Users
    SQS_QUEUE_NAME: EmailQueue
    ACCOUNT_ID: 992909816699
    REGION: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:us-east-1:992909816699:table/Links

    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:us-east-1:992909816699:table/Users
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: arn:aws:ses:us-east-1:992909816699:identity/andreybuno333@gmail.com
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: arn:aws:ses:us-east-1:992909816699:identity/funkypotato0@gmail.com
    - Effect: Allow
      Action:
        - sqs:sendmessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: arn:aws:sqs:us-east-1:992909816699:EmailQueue
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionName: authorizerFunc
        enableSimpleResponses: true
        identitySource:
          - $request.header.authorization

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-offline-sqs

package:
  individually: true

functions:
  signUp:
    handler: src/func/auth/sign-up.handler
    events:
      - httpApi:
          path: /signUp
          method: post
  signIn:
    handler: src/func/auth/sign-in.handler
    events:
      - httpApi:
          path: /signIn
          method: post
  createLink:
    handler: src/func/links/create-link.handler
    events:
      - httpApi:
          path: /createLink
          method: post
          authorizer:
            name: customAuthorizer
  getById:
    handler: src/func/links/get-links-by-id.handler
    events:
      - httpApi:
          path: /getById
          method: get
          authorizer:
            name: customAuthorizer
  redirect:
    handler: src/func/links/redirect.handler
    events:
      - httpApi:
          path: /{linkId}
          method: get
  deactivateLinkById:
    handler: src/func/links/deactivate-link-by-id.handler
    events:
      - httpApi:
          path: /deactivate
          method: post
  deactivateLinks:
    handler: src/func/links/deactivate-links.handler
    events:
      - eventBridge:
          schedule: rate(1 minute)
  sendEmail:
    handler: src/func/email/send-email.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
          batchSize: 10

  authorizerFunc:
    handler: src/func/auth/authorizer.handler

custom:
  dotenv:
    path: environment/prod.env
  default: 'local'
  serverless-offline:
    noPrependStageInUrl: true
    noAuth: true

resources:
  Resources:
    LinkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Links
        AttributeDefinitions:
          - AttributeName: linkId
            AttributeType: S
        KeySchema:
          - AttributeName: linkId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: EmailQueue
    EmailIdentity:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: andreybuno333@gmail.com
